import{_ as l,c as s,o as a,b as n}from"./app.e637ca87.js";const D=JSON.parse('{"title":"需要记忆的内容","description":"","frontmatter":{},"headers":[{"level":2,"title":"类型注解","slug":"类型注解","link":"#类型注解","children":[]},{"level":2,"title":"常用类型","slug":"常用类型","link":"#常用类型","children":[{"level":3,"title":"基础数据类型","slug":"基础数据类型","link":"#基础数据类型","children":[]},{"level":3,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":3,"title":"函数💥","slug":"函数💥","link":"#函数💥","children":[]},{"level":3,"title":"对象","slug":"对象","link":"#对象","children":[]},{"level":3,"title":"接口interface 💥","slug":"接口interface-💥","link":"#接口interface-💥","children":[]},{"level":3,"title":"interface与type的区别","slug":"interface与type的区别","link":"#interface与type的区别","children":[]},{"level":3,"title":"字面量 💥","slug":"字面量-💥","link":"#字面量-💥","children":[]},{"level":3,"title":"枚举 💥","slug":"枚举-💥","link":"#枚举-💥","children":[]},{"level":3,"title":"any👎","slug":"any👎","link":"#any👎","children":[]},{"level":3,"title":"as类型断言（听哥的）","slug":"as类型断言-听哥的","link":"#as类型断言-听哥的","children":[]},{"level":3,"title":"typeof","slug":"typeof","link":"#typeof","children":[]}]},{"level":2,"title":"高级类型","slug":"高级类型","link":"#高级类型","children":[{"level":3,"title":"联合类型","slug":"联合类型","link":"#联合类型","children":[]},{"level":3,"title":"类型别名","slug":"类型别名","link":"#类型别名","children":[]},{"level":3,"title":"交叉类型：","slug":"交叉类型","link":"#交叉类型","children":[]},{"level":3,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":3,"title":"泛型函数💥","slug":"泛型函数💥","link":"#泛型函数💥","children":[]},{"level":3,"title":"泛型工具:","slug":"泛型工具","link":"#泛型工具","children":[]},{"level":3,"title":"类型声明文件","slug":"类型声明文件","link":"#类型声明文件","children":[]},{"level":3,"title":"自定义类型声明文件","slug":"自定义类型声明文件","link":"#自定义类型声明文件","children":[]}]}],"relativePath":"memory.md","lastUpdated":1675604792000}'),e={name:"memory.md"},o=n(`<h1 id="需要记忆的内容" tabindex="-1">需要记忆的内容 <a class="header-anchor" href="#需要记忆的内容" aria-hidden="true">#</a></h1><h2 id="类型注解" tabindex="-1">类型注解 <a class="header-anchor" href="#类型注解" aria-hidden="true">#</a></h2><p>作用：约束变量的类型</p><p>特点：违反类型匹配，则报错</p><p>语法： 变量 <code>：类型</code></p><h2 id="常用类型" tabindex="-1">常用类型 <a class="header-anchor" href="#常用类型" aria-hidden="true">#</a></h2><h3 id="基础数据类型" tabindex="-1">基础数据类型 <a class="header-anchor" href="#基础数据类型" aria-hidden="true">#</a></h3><p>推荐： 👍 省略注解</p><h3 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-hidden="true">#</a></h3><ol><li>推荐：👍: 类型[]</li><li>推荐：：(类型1 | 类型2)[]</li></ol><h3 id="函数💥" tabindex="-1">函数💥 <a class="header-anchor" href="#函数💥" aria-hidden="true">#</a></h3><ol><li>语法：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 分开指定</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">xxx</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">aaa</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">类型</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">bbb</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">类型</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">类型</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 同时指定</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">XxxFn</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">aaa</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">类型</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">bbb</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">类型</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">类型</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> addFn </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">XxxFn</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="2"><li>void💥：表示函数没有返回值</li><li>可选参数： <ol><li>参数名称💥? : 类型</li><li>可选参数， 必须放在必选参数，之后</li></ol></li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">xxx</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">aaa</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">类型</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">bbb</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">类型</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">类型</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="对象" tabindex="-1">对象 <a class="header-anchor" href="#对象" aria-hidden="true">#</a></h3><p>语法<code>：{ 属性: 类型， 可选属性?：类型, sayHi(): 返回值类型, sayHello: () =&gt; 返回值类型}</code></p><p>推荐：使用type维护对象类型</p><h3 id="接口interface-💥" tabindex="-1">接口interface 💥 <a class="header-anchor" href="#接口interface-💥" aria-hidden="true">#</a></h3><ol><li>作用：指定定义对象类型</li><li>语法：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Xxx</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">属性名</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">类型</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Yyyy</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">Xxx</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>特点：</p><ol><li>i💥nterface可以同名， 同名会自动合并</li><li>interface可以继承其它interface</li></ol><h3 id="interface与type的区别" tabindex="-1">interface与type的区别 <a class="header-anchor" href="#interface与type的区别" aria-hidden="true">#</a></h3><ol><li><p>type不可以重名， interface可以</p></li><li><p>type可以定义任意类型， interface只能定义对象类型</p></li><li><p>type不可继承， 可以使用交叉&amp;(类似继承)</p></li></ol><h3 id="字面量-💥" tabindex="-1">字面量 💥 <a class="header-anchor" href="#字面量-💥" aria-hidden="true">#</a></h3><ol><li>本质： 值作为类型</li><li>场景：通常和联合类型配合， 表示一组可选的取值范围</li></ol><h3 id="枚举-💥" tabindex="-1">枚举 💥 <a class="header-anchor" href="#枚举-💥" aria-hidden="true">#</a></h3><ol><li><p>作用：表示一组可选的取值范围</p></li><li><p>特点：既可以当做类型，又可以当做值</p></li><li><p>语法：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Xxxx</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	属性名 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 值</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>种类：</p><ol><li>数字枚举👍： 默认从0开始递增</li><li>文字枚举：不会递增</li></ol></li></ol><h3 id="any👎" tabindex="-1">any👎 <a class="header-anchor" href="#any👎" aria-hidden="true">#</a></h3><ol><li>作用：告诉TS忽略类型检查</li></ol><h3 id="as类型断言-听哥的" tabindex="-1">as类型断言（听哥的） <a class="header-anchor" href="#as类型断言-听哥的" aria-hidden="true">#</a></h3><ol><li>作用：告诉TS以我的类型为准</li><li>语法： <code>值 as 类型</code></li></ol><h3 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-hidden="true">#</a></h3><ol><li>作用：查询一个值的类型</li><li>语法： <code>typeof 值</code></li></ol><h2 id="高级类型" tabindex="-1">高级类型 <a class="header-anchor" href="#高级类型" aria-hidden="true">#</a></h2><h3 id="联合类型" tabindex="-1">联合类型 <a class="header-anchor" href="#联合类型" aria-hidden="true">#</a></h3><ol><li>语法： <code>类型1 | 类型2</code></li><li>作用：表示多个类型可选</li></ol><h3 id="类型别名" tabindex="-1">类型别名 <a class="header-anchor" href="#类型别名" aria-hidden="true">#</a></h3><ol><li>作用：自定义类型</li><li>语法： <code>type Xxxx = 任意的类型</code></li><li>规范：类型别名，使用大驼峰命名</li></ol><h3 id="交叉类型" tabindex="-1">交叉类型： <a class="header-anchor" href="#交叉类型" aria-hidden="true">#</a></h3><ol><li>语法： 类型1 &amp; 类型2</li><li>作用： 类型继承</li></ol><h3 id="泛型" tabindex="-1">泛型 <a class="header-anchor" href="#泛型" aria-hidden="true">#</a></h3><ol><li>作用： 复用已有类型</li><li>种类： <ol><li>泛型函数： <code>function 函数名&lt;T&gt;(形参： T) ： T{}</code></li><li>泛型别名: <code>type 自定名称&lt;T&gt; = { 属性名： T}</code></li><li>泛型接口： <code>interface 自定义名称&lt;T&gt; { 属性名： T }</code></li></ol></li></ol><h3 id="泛型函数💥" tabindex="-1">泛型函数💥 <a class="header-anchor" href="#泛型函数💥" aria-hidden="true">#</a></h3><p>定义：<code>function 函数名&lt;T&gt;(形参： T) ： T{}</code></p><p>调用：</p><ol><li><p>简写 <code>函数名()</code></p></li><li><p>💥完整： <code>函数名&lt;类型&gt;()</code></p></li></ol><h3 id="泛型工具" tabindex="-1">泛型工具: <a class="header-anchor" href="#泛型工具" aria-hidden="true">#</a></h3><ol><li><code>Partial: 💥</code><ol><li>作用：将对象的所有属性， 转为可选属性</li><li>语法：Partial&lt;对象类型&gt;</li></ol></li><li><code>Pick💥</code><ol><li>作用：从对象在中，挑选一部分属性， 组成新的对象类型</li><li>语法：<code>Pick&lt;对象类型， &quot;属性名1&quot; | &quot;属性名2&quot;&gt;</code></li></ol></li><li><code>ReadOnly</code><ol><li>作用：将对象的所有属性，转为只读</li><li>语法：<code>Readonly</code>&lt;对象类型&gt;</li></ol></li><li>Omit <ol><li>作用：从对象在中，挑选一部分属性， 删除掉</li><li>语法：<code>Omit&lt;对象类型， &quot;属性名1&quot; | &quot;属性名2&quot;&gt;</code></li></ol></li></ol><h3 id="类型声明文件" tabindex="-1">类型声明文件 <a class="header-anchor" href="#类型声明文件" aria-hidden="true">#</a></h3><p>文件种类：</p><ol><li><p><code>.ts</code>： 即可可以写类型代码， 又可以写可运行的代码</p></li><li><p><code>.d.ts</code>：只能写类型代码</p></li></ol><p>作用：<strong>d.ts文件，给js或ts文件，提供类型</strong></p><p>类型文件存在的三个位置：</p><ol><li>内置类型：<code>vscode</code>自带</li><li><code>npm包</code>：<code>1 npm包自带</code> <code>2 @types/包名称</code></li><li>自定义类型声明文件</li></ol><h3 id="自定义类型声明文件" tabindex="-1">自定义类型声明文件 <a class="header-anchor" href="#自定义类型声明文件" aria-hidden="true">#</a></h3><ol><li>共享类型💥💥</li><li>给JS提供类型支持：类型声明文件与JS文件同名</li><li>给模块包提供类型：\`declare module &quot;包名称&quot;</li></ol>`,58),p=[o];function i(t,r,c,d,y,h){return a(),s("div",null,p)}const A=l(e,[["render",i]]);export{D as __pageData,A as default};
