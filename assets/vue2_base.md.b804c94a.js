import{_ as e,o,c as p,a as s,k as a,r as t,V as l}from"./chunks/framework.956eca13.js";const q=JSON.parse('{"title":"Vue基础","description":"","frontmatter":{},"headers":[],"relativePath":"vue2/base.md","filePath":"vue2/base.md","lastUpdated":1693489855000}'),r={name:"vue2/base.md"},i=l(`<h1 id="vue基础" tabindex="-1">Vue基础 <a class="header-anchor" href="#vue基础" aria-label="Permalink to &quot;Vue基础&quot;">​</a></h1><h2 id="mvvm💥💥" tabindex="-1">MVVM💥💥 <a class="header-anchor" href="#mvvm💥💥" aria-label="Permalink to &quot;MVVM💥💥&quot;">​</a></h2><p>本质：一种架构模式（编写代码的方式）。</p><p>理解：不需要操作dom的代码编写方式。</p><br><p><strong>特点：（需要记忆）</strong></p><ol><li><strong>数据驱动视图</strong>： 数据变化，页面会自动变化。 （我们不操作dom）</li><li><strong>数据双向绑定</strong>：页面变化， 数据会自动变化。 （我们不操作dom）</li></ol><h2 id="组件" tabindex="-1">组件 <a class="header-anchor" href="#组件" aria-label="Permalink to &quot;组件&quot;">​</a></h2><p>本质：一个.vue文件，就是一个组件</p><p>特点：由<strong>三部分</strong>组成</p><ol><li>template：书写html代码 <ul><li>注意：必须有一个根节点</li></ul></li><li>script：书写JS代码</li><li>style：书写样式代码</li></ol><h2 id="插值表达式" tabindex="-1">插值表达式 <a class="header-anchor" href="#插值表达式" aria-label="Permalink to &quot;插值表达式&quot;">​</a></h2><p>作用： 给标签设置<strong>内容</strong></p><p>语法：{ { 表达式 } }</p><h2 id="指令💥💥" tabindex="-1">指令💥💥 <a class="header-anchor" href="#指令💥💥" aria-label="Permalink to &quot;指令💥💥&quot;">​</a></h2><p>三个特点：</p><ol><li>所有的指令都是，特殊的 <strong>标签属性</strong></li><li>所有的指令都是，都以 <strong>v-开头</strong></li><li>所有的指令都是，都是等号右侧连接引号，如， <strong>v-xxx=&quot;...&quot;</strong><br></li></ol><h3 id="v-bind" tabindex="-1">v-bind <a class="header-anchor" href="#v-bind" aria-label="Permalink to &quot;v-bind&quot;">​</a></h3><p>作用：给标签<strong>设置属性</strong></p><p>语法：v-bind:属性名=&quot;表达式&quot;</p><p>推荐：👍<code>:属性名=&quot;表达式&quot;</code></p><br><h3 id="v-on" tabindex="-1">v-on <a class="header-anchor" href="#v-on" aria-label="Permalink to &quot;v-on&quot;">​</a></h3><p>作用：绑定事件</p><p>语法：<code>v-on:事件名=&quot;...&quot;</code></p><p>推荐：👍<code>@事件名=&quot;...&quot;</code></p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">少量的代码</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> 123 &lt;button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;button @click=&quot;函数名&quot; &gt; 123 &lt;button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt;button @click=&quot;函数名(参数)&quot; &gt; 123 &lt;button&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><br><h4 id="事件对象获取" tabindex="-1">事件对象获取 <a class="header-anchor" href="#事件对象获取" aria-label="Permalink to &quot;事件对象获取&quot;">​</a></h4><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 函数通过形参获取</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">函数名</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> 123 &lt; /button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> // 通过$event传入事件对象   </span></span>
<span class="line"><span style="color:#A6ACCD;"> &lt;button @click=&quot;函数名(参数1， $event)&quot; &gt; 123 </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><br><h4 id="鼠标事件修饰符" tabindex="-1">鼠标事件修饰符 <a class="header-anchor" href="#鼠标事件修饰符" aria-label="Permalink to &quot;鼠标事件修饰符&quot;">​</a></h4><p>作用：给事件增强功能</p><p>语法：<code>@鼠标事件.修饰符=&quot;...&quot;</code></p><p>种类（常用）:</p><ol><li><code>.prevent</code>：阻止默认行为</li><li><code>.stop</code>：阻止事件冒泡</li></ol><br><h4 id="按键修饰符" tabindex="-1">按键修饰符 <a class="header-anchor" href="#按键修饰符" aria-label="Permalink to &quot;按键修饰符&quot;">​</a></h4><p>作用：给事件增强功能</p><p>语法：@键盘事件.修饰符=&quot;...&quot;</p><p>种类:</p><ol><li><code>.enter</code>：监听回车按键触发</li><li><code>.esc</code>： 监听Esc按键触发</li></ol><br><h3 id="v-if和v-show" tabindex="-1">v-if和v-show <a class="header-anchor" href="#v-if和v-show" aria-label="Permalink to &quot;v-if和v-show&quot;">​</a></h3><p>作用：控制标签的显示和隐藏</p><p>语法：<code>v-if=&quot;布尔值&quot;</code>。 布尔为<code>true</code>，标签显示。 为<code>false</code>，标签不显示</p><p>区别：</p><ol><li><code>v-show</code>：通过样式<code>display：none</code>控制隐藏</li><li><code>v-if</code>：通过创建或销毁， 控制显示与隐藏</li></ol><p>场景：</p><ol><li>频繁创建，用<code>v-show</code>，节省性能</li><li>不频繁数据，敏感数据，使用<code>v-if</code></li></ol><br><h3 id="v-if-和-v-else-if-和v-else" tabindex="-1">v-if 和 v-else-if 和v-else <a class="header-anchor" href="#v-if-和-v-else-if-和v-else" aria-label="Permalink to &quot;v-if 和 v-else-if 和v-else&quot;">​</a></h3><p>语法：</p><ol><li><code>v-if=&quot;布尔值&quot;</code></li><li><code>v-else-if=&quot;布尔值&quot;</code></li><li><code>v-else</code></li></ol><p>注意：</p><ol><li><code>v-if</code>、 <code>v-else-if</code>、 <code>v-else</code>三者之间，不能放入其它标签</li></ol><br><h3 id="v-model-💥💥💥" tabindex="-1">v-model 💥💥💥 <a class="header-anchor" href="#v-model-💥💥💥" aria-label="Permalink to &quot;v-model 💥💥💥&quot;">​</a></h3><p>作用： 数据双向绑定</p><p>语法： <code>v-model=&quot;变量名&quot;</code></p><p>双向绑定：</p><ol><li>数据变化，页面自动变化。</li><li>页面变化， 数据自动变化。</li></ol><p>场景：💥💥</p><ol><li>收集用户输入内容</li><li>回填表单数据</li></ol><hr><br><h4 id="v-model修饰符" tabindex="-1">v-model修饰符 <a class="header-anchor" href="#v-model修饰符" aria-label="Permalink to &quot;v-model修饰符&quot;">​</a></h4><p>语法：<code>v-model.修饰符=&quot;变量名&quot;</code></p><p>种类：</p><ol><li>.number: 将收集的数据，转为数字格式，再存给变量</li><li>.trim：去除首尾空白字符</li><li>.lazy：失去焦点时，才收集数据</li></ol><hr><br><h3 id="v-for" tabindex="-1">v-for <a class="header-anchor" href="#v-for" aria-label="Permalink to &quot;v-for&quot;">​</a></h3><p>作用：创建多个标签</p><p>口诀：<strong>需要生成多个谁，就写在谁身上</strong></p><p>语法：</p><ol><li><code>v-for=&quot;item in 数组&quot; :key=&quot;数据.id&quot;</code></li><li><code>v-for=&quot;(item, index) in 数组&quot; :key=&quot;数据.id&quot;</code></li></ol><hr><br><h4 id="key属性" tabindex="-1">key属性 <a class="header-anchor" href="#key属性" aria-label="Permalink to &quot;key属性&quot;">​</a></h4><p>作用： 提高dom更新效率</p><p>口诀： 💥💥💥有id用id，没id用唯一，没唯一用索引</p><br><h2 id="style-和-class👍" tabindex="-1">:style 和 :class👍 <a class="header-anchor" href="#style-和-class👍" aria-label="Permalink to &quot;:style  和 :class👍&quot;">​</a></h2><p>作用：给标签添加样式</p><p>语法：<code>:class=&quot;{类名：布尔值}&quot;</code> 为<code>ture</code>添加类名， 为<code>false</code>去除类名</p><p>语法: <code>style=&quot;{css属性名: 值, 小驼峰属性名：值， &#39;连字符属性名&#39;： 属性值}&quot;</code></p><br><h2 id="计算属性" tabindex="-1">计算属性 <a class="header-anchor" href="#计算属性" aria-label="Permalink to &quot;计算属性&quot;">​</a></h2><p>作用： 根据其它的数据， 计算得来一个新的值</p><p>优势：</p><ol><li>只有依赖的数据变化， 才会重新计算</li><li>计算属性，自带缓存效果</li></ol><br>`,93),c=l(`<p>语法：</p><ol><li>简写写法：只读不改，用简写</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">xxx</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 💥💥 必须有返回值</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>完整写法: 需要对计算属性赋值时，用完整</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">xxx</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 💥💥 必须有返回值     </span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 形参val，是计算属性接收到的值</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="侦听器" tabindex="-1">侦听器 <a class="header-anchor" href="#侦听器" aria-label="Permalink to &quot;侦听器&quot;">​</a></h2><ol><li>简写写法 - <strong>基本数据</strong>类型</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">watch</span><span style="color:#89DDFF;">:{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">被监听的数据名</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>完整写法 - <strong>引用数据</strong>类型</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">被监听的数据名</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">immediate</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">deep</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">handler</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="组件-1" tabindex="-1">组件 <a class="header-anchor" href="#组件-1" aria-label="Permalink to &quot;组件&quot;">​</a></h2><h3 id="组件注册" tabindex="-1">组件注册 <a class="header-anchor" href="#组件注册" aria-label="Permalink to &quot;组件注册&quot;">​</a></h3><p>规范：</p><ol><li>注册的组件：大驼峰，如<code>HmButton</code></li><li>使用组件：小写+连字符, 如<code>&lt;hm-button&gt;</code></li><li>文件名： <ol><li>小写+连字符，如<code>hm-button.vue</code></li><li>大驼峰，如<code>HmButton.vue</code></li></ol></li></ol><h3 id="组件通信-父传子" tabindex="-1">组件通信-父传子 <a class="header-anchor" href="#组件通信-父传子" aria-label="Permalink to &quot;组件通信-父传子&quot;">​</a></h3><ol><li>父组件内， 在自组件标签上， 写属性</li><li>子组件内， 通过props属性接收</li></ol><h3 id="组件通信-子传父" tabindex="-1">组件通信-子传父 <a class="header-anchor" href="#组件通信-子传父" aria-label="Permalink to &quot;组件通信-子传父&quot;">​</a></h3><ol><li>子组件内， 通过：$emit(“自定义事件”, 参数， 参数2)</li><li>父组件内， 子组件标签上，： @自定义事件名=&quot;函数式&quot;</li></ol><h3 id="组件通信-单项数据流" tabindex="-1">组件通信-单项数据流 <a class="header-anchor" href="#组件通信-单项数据流" aria-label="Permalink to &quot;组件通信-单项数据流&quot;">​</a></h3><p>💥 Vue 单项数据流：</p><ol><li>👎不推荐子组件，直接修改父组件传来的数据</li><li>👍让父组件自己修改数据</li></ol><h3 id="v-model语法糖" tabindex="-1">v-model语法糖 <a class="header-anchor" href="#v-model语法糖" aria-label="Permalink to &quot;v-model语法糖&quot;">​</a></h3><p>本质：:value和@input，两个指令二合一</p><h2 id="ref和-refs" tabindex="-1">ref和$refs <a class="header-anchor" href="#ref和-refs" aria-label="Permalink to &quot;ref和$refs&quot;">​</a></h2><p>作用：1获取dom； 2获取组件实例对象</p><p>步骤：</p><p>1.绑定<code>ref</code>属性： <code>&lt;标签名 ref=&quot;xxx&quot;&gt;&lt;/标签名&gt;</code></p><p>2.通过<code>$refs.xxx</code>获取： <code>this.$refs.xxx</code></p><h2 id="nexttcik" tabindex="-1">$nextTcik <a class="header-anchor" href="#nexttcik" aria-label="Permalink to &quot;$nextTcik&quot;">​</a></h2><p>作用：等dom更新结束， 再执行某些代码</p><p>语法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$nextTick</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// dom更新后， 回调函数自动执行</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="动态组件" tabindex="-1">动态组件 <a class="header-anchor" href="#动态组件" aria-label="Permalink to &quot;动态组件&quot;">​</a></h2><p>作用：在同一个位置，动态切换，显示不同的组件</p><p>步骤：</p><ol><li>设置 <code>&lt;component :is=&quot;组件名称&quot; &gt;</code></li><li>切换<code>组件名称</code> 变量</li></ol><h2 id="插槽" tabindex="-1">插槽 <a class="header-anchor" href="#插槽" aria-label="Permalink to &quot;插槽&quot;">​</a></h2><blockquote><p>场景：当组件内， 有不确定的<strong>标签</strong>时， 使用插槽.</p></blockquote><p>种类<strong>3种</strong>：</p><ol><li>匿名插槽</li><li>具名插槽</li><li>作用域插槽</li></ol><hr><br><h3 id="_1-匿名插槽" tabindex="-1">1-匿名插槽 <a class="header-anchor" href="#_1-匿名插槽" aria-label="Permalink to &quot;1-匿名插槽&quot;">​</a></h3><p>场景： 组件内， <strong>只有一处</strong>有不确定的标签时， 使用匿名插槽</p><p>步骤：</p><ol><li>子组件内，使用<code>&lt;slot&gt;&lt;/slot&gt;</code>占位</li><li>父组件内，子组件标签夹着的内容区域，设置传给<code>slot</code>的内容</li></ol><p>语法：</p><p><code>子组件.vue</code></p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 1. 子组件内， 使用slot标签占位</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">默认值（如果父组件不传任何内容，默认值将显示）</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>父组件.vue</code></p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">// 2. 父组件内，子组件标签夹着的内容区域， 传给\`slot\`内容</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">hm-child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;xxx&gt; 你要传给slot区域的内容 &lt;/xxx&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">hm-child</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><hr><br><h3 id="_2-具名插槽" tabindex="-1">2-具名插槽 <a class="header-anchor" href="#_2-具名插槽" aria-label="Permalink to &quot;2-具名插槽&quot;">​</a></h3><p>场景：组件内， <strong>有多处</strong>有不确定的标签时</p><p>简写：<code>v-slot:xxx</code>可以简化成<code>#xxx</code></p><p>步骤：</p><ol><li>子组件内，使用<code>&lt;slot/&gt;</code>占位，<strong>并给<code>&lt;slot /&gt;</code> 设置不同的name属性</strong></li><li>父组件内，子组件标签夹着的内容区域，<strong>使用<code>&lt;template #xxx /&gt;</code></strong>，传给<code>slot</code>内容</li></ol><p>语法：</p><ol><li>👍 <code>&lt;slot name=&quot;xxx&quot;/&gt;</code> 与 <code>&lt;template #xxx &gt; 内容 &lt;/template&gt;</code></li><li>👍 <code>&lt;slot /&gt;</code> 与 <code>&lt;template #default &gt; 内容 &lt;/template&gt;</code></li></ol><p>示例：</p><p><code>子组件.vue</code>：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">xxx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">默认值1</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">zzz</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">默认值2</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>父组件.vue</code>：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">hm-child</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;template #xxx&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;span&gt; 你要传给slot-xxx区域的内容 &lt;/span&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/template&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;template #zzz&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &lt;span&gt; 你要传给slot-zzz区域的内容 &lt;/span&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  &lt;/template&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">hm-child</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><br><h3 id="_3-作用域插槽" tabindex="-1">3-作用域插槽 <a class="header-anchor" href="#_3-作用域插槽" aria-label="Permalink to &quot;3-作用域插槽&quot;">​</a></h3><p>作用：组件内的数据，可以传给父组件使用</p><p>步骤：</p>`,70),d=a("li",null,[s("父组件内，通过"),a("code",null,'#xxx="对象变量"'),s("，接收数据")],-1),u=l(`<p>语法：</p><ol><li><code>&lt;slot name=&quot;xxx&quot; yes=&quot;确定&quot; no=&quot;取消&quot; /&gt;</code> 和 <code>&lt;template #xxx=&quot;{yes, no}&quot; /&gt;</code></li><li><code>&lt;slot yes=&quot;确定&quot; no=&quot;取消&quot; /&gt;</code> 和 <code>&lt;template #default=&quot;{yes, no}&quot; /&gt;</code></li></ol><p>注意💥：</p><ol><li><strong>为什么叫作用域插槽？</strong> 父组件接收的数据，只能在<code>&lt;template #xxx=&quot;{}&quot; /&gt;</code>标签范围内使用</li></ol><hr><br><h2 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-label="Permalink to &quot;路由&quot;">​</a></h2><h3 id="路由参数" tabindex="-1">路由参数 <a class="header-anchor" href="#路由参数" aria-label="Permalink to &quot;路由参数&quot;">​</a></h3><ol><li>动态路由 ： <ol><li>.传： <ol><li>改造动态路由， path: &quot;路径名/:自定义属性名&quot;</li><li>路径传参</li></ol></li><li>接收: <code>$route.params</code></li><li>场景： 必传参数</li></ol></li><li>查询（搜索）字符串： <code> ？aa=xx&amp;bb=yy</code><ol><li>传： 不用改造</li><li>接：<code> $route.query</code></li><li>场景：可选参数</li></ol></li></ol><h3 id="路由模式" tabindex="-1">路由模式 <a class="header-anchor" href="#路由模式" aria-label="Permalink to &quot;路由模式&quot;">​</a></h3><p>种类：</p><ol><li>hash路由： 带#</li><li>history路由： 不带#， 需要服务度端支持</li></ol><p>语法：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VueRouter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">history</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 不写mode为hash路由</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="编程式导航" tabindex="-1">编程式导航 <a class="header-anchor" href="#编程式导航" aria-label="Permalink to &quot;编程式导航&quot;">​</a></h3><p>了解-导航种类：</p><ol><li>声明式导航： router-link</li><li>编程式导航： 通过JS跳转</li></ol><p><strong>跳转方式</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/路径</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">back</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 返回上一页</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">go</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 返回上一页</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="路由传参" tabindex="-1">路由传参 <a class="header-anchor" href="#路由传参" aria-label="Permalink to &quot;路由传参&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 传查询字符串：  ?keyword=123&amp;name=xxx</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/路径名</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">属性名</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 值</span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 传动态路由： 路径传值</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/路径名/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> 参数值)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><h3 id="脚手架" tabindex="-1">脚手架 <a class="header-anchor" href="#脚手架" aria-label="Permalink to &quot;脚手架&quot;">​</a></h3><p>本质：前端脚手架是一个npm包</p><p>作用：一键生成一个空的项目，已配置好需要的环境，提高程序员开发效率。</p><p>问题：</p><ol><li>vue2脚手架，如何使用？<details><summary>答案</summary><ul><li>\`npm i @vue/cli -g\`</li><li>\`vue --version\`</li><li>\`vue create 项目名称\`</li></ul></details></li><li>项目名称，是否可以有中文或特殊符号？能否叫vue、webpack之类？推荐命名方式是什么？<details><summary>答案</summary><ul><li>不可以有中文或特殊符号</li><li>不可以与使用到的npm重名</li><li>推荐小写+连字符，如<code>xxx-xx</code></li></ul></details></li></ol><h3 id="mvvm💥💥💥💥💥" tabindex="-1">MVVM💥💥💥💥💥 <a class="header-anchor" href="#mvvm💥💥💥💥💥" aria-label="Permalink to &quot;MVVM💥💥💥💥💥&quot;">​</a></h3><p>本质：一种架构模式（编写代码的方式）。</p><p>理解：不需要操作dom的代码编写方式。</p><br><p><strong>特点：</strong></p><ol><li><strong>数据驱动视图</strong>： 数据变化，页面会自动变化。 （我们不操作dom）</li><li><strong>数据双向绑定</strong>：页面变化， 数据会自动变化。 （我们不操作dom）</li></ol><hr><br><h3 id="组件化开发" tabindex="-1">组件化开发 <a class="header-anchor" href="#组件化开发" aria-label="Permalink to &quot;组件化开发&quot;">​</a></h3><blockquote><p>背景：现代前端项目，代码量非常大，需要分不同的文件管理代码。</p></blockquote><p>本质：</p><ol><li>一个大的页面，会先拆分成不同的小组件。</li><li>通过组装多个小组件，组合成一个页面。</li></ol><p>优势：</p><ol><li>便于维护</li><li>便于复用</li></ol><hr><br><h3 id="钩子函数" tabindex="-1">钩子函数 <a class="header-anchor" href="#钩子函数" aria-label="Permalink to &quot;钩子函数&quot;">​</a></h3><p>本质：某个时机，会自动执行的函数</p><p><strong>常用的钩子函数</strong>：</p><ol><li>created： 创建后， 发请求，请求数据</li><li>mounted： 渲染后，最先获取dom</li></ol><p>扩展问题：</p><ol><li>Axios中有没有钩子函数？</li></ol><h2 id="axios" tabindex="-1">Axios <a class="header-anchor" href="#axios" aria-label="Permalink to &quot;Axios&quot;">​</a></h2><p>参数位置：</p><ol><li>query 用 params</li><li>body 用 data写</li></ol><h2 id="扩展" tabindex="-1">扩展： <a class="header-anchor" href="#扩展" aria-label="Permalink to &quot;扩展：&quot;">​</a></h2><p><a href="https://es6.ruanyifeng.com/#docs/object" target="_blank" rel="noreferrer">ES6入门指南</a></p><p>面试题：</p><h3 id="js数据类型" tabindex="-1">JS数据类型： <a class="header-anchor" href="#js数据类型" aria-label="Permalink to &quot;JS数据类型：&quot;">​</a></h3><ol><li>ES6之前6种： <ol><li>string 、number、undefined、null、boolean、</li><li>对象 （易错点：💥💥 函数、数组、对象都属于对象数据类型）</li></ol></li><li>ES6新增了第7种：<a href="https://es6.ruanyifeng.com/#docs/symbol" target="_blank" rel="noreferrer">Symbol</a></li></ol><h2 id="面试题" tabindex="-1">面试题 <a class="header-anchor" href="#面试题" aria-label="Permalink to &quot;面试题&quot;">​</a></h2><h3 id="diff算法-更新策略" tabindex="-1">diff算法-更新策略 <a class="header-anchor" href="#diff算法-更新策略" aria-label="Permalink to &quot;diff算法-更新策略&quot;">​</a></h3><p><strong>设计目的：</strong> 比较新旧虚拟节点，找出需要更新的节点，从而最小化DOM操作的次数，提高页面的性能。</p><p><strong>策略:</strong></p><ol><li><p>比较<strong>同级根元素：</strong></p><ol><li>如果<strong>类型变化</strong>，<strong>不复用</strong>该根元素。该元素及后代元素,，全部删除。</li><li>如果<strong>类型没变</strong>, <strong>复用</strong>该根元素，对比属性，更新Dom属性。</li></ol></li><li><p>比较<strong>同级兄弟节点：</strong></p><ol><li>如果<strong>不写key，下标相同</strong>的节点，进行对比。 根据策略1, 决定是否复用。</li><li>如果<strong>有写key，key相同</strong>的节点进行对比,，根据策略1, 决定是否复用。</li></ol></li></ol><h3 id="说一下vue的声明周期" tabindex="-1">说一下Vue的声明周期 <a class="header-anchor" href="#说一下vue的声明周期" aria-label="Permalink to &quot;说一下Vue的声明周期&quot;">​</a></h3><p>常用：四大阶段、8个钩子函数</p><ol><li>创建- 前，后</li><li>挂载- 前，后</li><li>更新- 前，后</li><li>销毁- 前，后</li></ol><p>👍增加使用场景</p><ol><li>created 发请求</li><li>mounted最新获取dom，比如加载后立马激活input</li></ol>`,67);function b(n,h,y,F,D,m){return o(),p("div",null,[i,s(" 注意💥：计算属性名称，不能和data数据 methods方法 其它的计算属性成名 "),c,a("ol",null,[a("li",null,[s("子组件内，给"),t(n.$slots,"default"),s("标签，设置属性")]),d]),u])}const C=e(r,[["render",b]]);export{q as __pageData,C as default};
