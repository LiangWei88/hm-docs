import{_ as s,c as n,o as a,a as l}from"./app.6f9c0979.js";const p="/hm-docs/assets/自来水处理.dab931b3.jpg",e="/hm-docs/assets/redux中间件-触发时机1.daad8c82.jpg",o="/hm-docs/assets/redux中间件-触发时机2.0f18d1dc.jpg",A=JSON.parse('{"title":"Redux 设计","description":"","frontmatter":{},"headers":[{"level":2,"title":"项目 store 设计","slug":"项目-store-设计","link":"#项目-store-设计","children":[]},{"level":2,"title":"Reducer 的分离与合并","slug":"reducer-的分离与合并","link":"#reducer-的分离与合并","children":[]},{"level":2,"title":"Action Type 的设计","slug":"action-type-的设计","link":"#action-type-的设计","children":[]},{"level":2,"title":"中间件概述","slug":"中间件概述","link":"#中间件概述","children":[]},{"level":2,"title":"中间件的触发时机","slug":"中间件的触发时机","link":"#中间件的触发时机","children":[]},{"level":2,"title":"logger 中间件","slug":"logger-中间件","link":"#logger-中间件","children":[]},{"level":2,"title":"Action 处理异步行为报错","slug":"action-处理异步行为报错","link":"#action-处理异步行为报错","children":[]},{"level":2,"title":"redux-thunk - 基本使用","slug":"redux-thunk-基本使用","link":"#redux-thunk-基本使用","children":[]},{"level":2,"title":"使用 redux-thunk 中间件前后对比","slug":"使用-redux-thunk-中间件前后对比","link":"#使用-redux-thunk-中间件前后对比","children":[]},{"level":2,"title":"redux-thunk - 中间件原理","slug":"redux-thunk-中间件原理","link":"#redux-thunk-中间件原理","children":[]},{"level":2,"title":"redux-devtools-extension 的使用","slug":"redux-devtools-extension-的使用","link":"#redux-devtools-extension-的使用","children":[]},{"level":2,"title":"安装依赖","slug":"安装依赖","link":"#安装依赖","children":[]}],"relativePath":"react/07-redux进阶.md","lastUpdated":1677170896000}'),r={name:"react/07-redux进阶.md"},c=l(`<h1 id="redux-设计" tabindex="-1">Redux 设计 <a class="header-anchor" href="#redux-设计" aria-hidden="true">#</a></h1><h2 id="项目-store-设计" tabindex="-1">项目 store 设计 <a class="header-anchor" href="#项目-store-设计" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">├─store</span></span>
<span class="line"><span style="color:#A6ACCD;">    └─reducer</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       article</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       todo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js      </span><span style="color:#676E95;font-style:italic;">// 入口文件合并多个 reducer</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├─action</span></span>
<span class="line"><span style="color:#A6ACCD;">    │      actionTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span><span style="color:#676E95;font-style:italic;">// actionType 提示文件</span></span>
<span class="line"><span style="color:#A6ACCD;">    │      article</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">    │      user</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">    └─index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js           </span><span style="color:#676E95;font-style:italic;">// store 入口文件</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="reducer-的分离与合并" tabindex="-1">Reducer 的分离与合并 <a class="header-anchor" href="#reducer-的分离与合并" aria-hidden="true">#</a></h2><ul><li>随着项目功能变得越来越复杂，需要 Redux 管理的状态也会越来越多</li><li>此时，有两种方式来处理状态的更新： <ol><li>使用一个 reducer：处理项目中所有状态的更新</li><li>使用多个 reducer：按照项目功能划分，每个功能使用一个 reducer 来处理该功能的状态更新</li></ol></li><li>推荐：👍<strong>使用第二种方案(多个 reducer)</strong>，每个 reducer 处理的状态更单一，职责更明确</li><li>此时，项目中会有多个 reducer，但是 <strong>store 只能接收一个 reducer</strong>，因此，需要将多个 reducer 合并为一根 reducer，才能传递给 store</li><li>合并方式：使用 Redux 中的 <code>combineReducers</code> 函数</li><li>注意：<strong>合并后，Redux 的状态会变为一个对象，对象的结构与 combineReducers 函数的参数结构相同</strong><ul><li>比如，此时 Redux 状态为：<code>{ a： aReducer 处理的状态, b： bReducer 处理的状态 }</code></li></ul></li><li>注意：虽然在使用 <code>combineReducers</code> 以后，整个 Redux 应用的状态变为了<code>对象</code>，但是，对于每个 reducer 来说，每个 reducer 只负责整个状态中的某一个值。也就是每个 reducer 各司其职，最终，由多个 reducer 合作完成整个应用状态的更新。 <ul><li>也就是：<strong>每个 reducer 只负责整个应用状态中的某一部分</strong>，每个 reducer 都很自私只关注自己的数据</li><li>举个例子： <ul><li>登录功能：<code>loginReducer</code> 处理的状态只应该是跟登录相关的状态</li><li>个人资料：<code>profileReducer</code> 处理的状态只应该是跟个人资料相关的状态</li><li>文章列表、文章详情、文章评论 等</li></ul></li></ul></li></ul><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">combineReducers</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">redux</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">moneyReducer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">reducer执行</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">action</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 处理各种各样的action</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">addOne</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">subOne</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">addMore</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">payload</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">subMore</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">payload</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 很重要</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">userReducer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">zs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">password</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">123456</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">payload</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 合并多个reducer</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> rootReducer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">combineReducers</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// a 和 b指的就是模块的名字</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">money</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> moneyReducer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">user</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> userReducer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> rootReducer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="action-type-的设计" tabindex="-1">Action Type 的设计 <a class="header-anchor" href="#action-type-的设计" aria-hidden="true">#</a></h2><ul><li>Action Type 指的是：action 对象中 type 属性的值</li><li>Redux 项目中会多次使用 action type，比如，action 对象、reducer 函数、dispatch(action) 等</li><li>目标：<strong>集中处理 action type，保持项目中 action type 的一致性</strong></li></ul><p>处理方式：</p><ol><li>在 store 目录中创建 <code>actionTypes</code> 目录或者 <code>constants</code> 目录，集中处理</li><li>使用<strong>常量</strong>来存储 action type</li><li>action type 的值采用：<code>&#39;domain/action&#39;(功能/动作)形式</code>，进行分类处理，比如， <ul><li>计数器：<code>&#39;counter/increment&#39;</code> 表示 Counter 功能中的 increment 动作</li><li>TodoMVC：<code>&#39;todos/add&#39;</code> 表示 TodoMVC 案例中 add 动作等</li><li>登录：<code>login/getCode</code> 表示登录获取验证码的动作；<code>login/submit</code> 表示登录功能</li><li>个人信息：<code>profile/get</code> 表示获取个人资料；<code>profile/updateName</code> 表示修改昵称</li></ul></li><li>将项目中用到 action type 的地方替换为这些常量，从而保持项目中 action type 的一致性</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 👍 通过常量存储字符串，书写时可以有代码提示</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// todo</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> CHANGE_DONE_TODO </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">todo/changeDoneById</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> DEL_TODO </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">todo/delById</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// user</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ....</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h1 id="redux-中间件" tabindex="-1">Redux 中间件 <a class="header-anchor" href="#redux-中间件" aria-hidden="true">#</a></h1><h2 id="中间件概述" tabindex="-1">中间件概述 <a class="header-anchor" href="#中间件概述" aria-hidden="true">#</a></h2><p><strong>目标：</strong> 能够理解为什么需要 redux 中间件</p><p><strong>内容：</strong></p><p>默认情况下，Redux 自身只能处理同步数据流。但是在实际项目开发中，状态的更新、获取，通常是使用异步操作来实现。</p><ul><li>问题：如何在 Redux 中进行异步操作呢?</li><li>回答：通过 Redux 中间件机制来实现。</li></ul><blockquote><p>中间件概念</p></blockquote><ul><li>中间件，可以理解为处理一个功能的中间环节</li><li>下图中，自来水从水库到用户家庭中的每一个环节都是一个中间件</li><li>中间件的优势：可以串联、组合，在一个项目中使用多个中间件</li><li><strong>Redux 中间件用来处理 状态 更新，也就是在 状态 更新的过程中，执行一系列的相应操作</strong></li></ul><p><img src="`+p+'" alt="水处理"></p><h2 id="中间件的触发时机" tabindex="-1">中间件的触发时机 <a class="header-anchor" href="#中间件的触发时机" aria-hidden="true">#</a></h2><ul><li><p>Redux 中间件执行时机：<strong>在 dispatching action 和 到达 reducer 之间</strong>。</p><ul><li>没有中间件：<code>dispatch(action) =&gt; reducer</code></li><li>使用中间件：<code>dispatch(action) =&gt; 执行中间件代码 =&gt; reducer</code></li></ul></li><li><p>原理：封装了 redux 自己的 dispatch 方法</p><ul><li>没有中间件：<code>store.dispatch()</code> 就是 Redux 库自己提供的 dispatch 方法，用来发起状态更新</li><li>使用中间件：<code>dispatch()</code> 就是 中间件 封装处理后的 dispatch，但是，最终一定会调用 Redux 库自己提供的 dispatch 方法</li></ul></li><li><p>没有中间件：</p><ul><li><img src="'+e+'" alt="redux中间件-触发时机1"></li></ul></li><li><p>有中间件：</p><ul><li><img src="'+o+`" alt="redux中间件-触发时机2"></li></ul></li></ul><h2 id="logger-中间件" tabindex="-1">logger 中间件 <a class="header-anchor" href="#logger-中间件" aria-hidden="true">#</a></h2><ol><li>安装：<code>yarn add redux-logger</code></li><li>导入 <code>import logger from &#39;redux-logger</code></li><li>从导入 <code>applyMiddleware</code> 函数</li><li>将 <code>applyMiddleware()</code> 调用作为 createStore 函数的第二个参数</li><li>应用 logger 中间件 <code>applyMiddleware(logger)</code></li></ol><ul><li>调用 store.dispatch() 查看 logger 中间件记录的日志信息</li></ul><div class="language-diff line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">import { createStore } from &#39;redux&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">import { createStore, applyMiddleware } from &#39;redux&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">import logger from &#39;redux-logger&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">import rootReducer from &#39;./reducer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">const store = createStore(rootReducer)</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">const store = createStore(rootReducer, applyMiddleware(logger))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="action-处理异步行为报错" tabindex="-1">Action 处理异步行为报错 <a class="header-anchor" href="#action-处理异步行为报错" aria-hidden="true">#</a></h2><ul><li>静态结构</li></ul><p><code>action/todo.js</code></p><div class="language-jsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addTodoCreator</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newTodo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    task</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">学习异步Action</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    isDone</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">todo/add</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    payload</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newTodo</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>reducer/todo.js</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">todo/add</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">list</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">payload </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">list]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>Main.js</code></p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;button onClick={() =&gt; dispatch(addTodoCreator())}&gt;点击异步增加新任务&lt;/button&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>action/todo.js</code> 中使用 Promise 模拟异步行为</li></ul><div class="language-diff line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">/* 模拟异步API的方法 */</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">function loadNewTodoAPI() {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">  const newTodo = {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">    task: &#39;异步返回的任务&#39;,</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">    id: Date.now(),</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">    isDone: false,</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">  console.log(&#39;开始请求&#39;);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">  return new Promise((resolve) =&gt; {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">    setTimeout(() =&gt; {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">      console.log(&#39;请求成功，2秒后,数据返回&#39;);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">      resolve(newTodo);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">    }, 2000);</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">  });</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">// 💥💥 默认Action不能有异步行为，React要求是Action只是一个普通的JS对象</span></span>
<span class="line"><span style="color:#A6ACCD;">// 这行代码会导致报错</span></span>
<span class="line"><span style="color:#A6ACCD;">export async function addTodoCreator() {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;"> const newTodo = await loadNewTodoAPI();</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> const newTodo = {id: Date.now(), task: &#39;学习异步Action&#39;, isDone: true}</span></span>
<span class="line"><span style="color:#A6ACCD;">  return {</span></span>
<span class="line"><span style="color:#A6ACCD;">    type: &#39;todo/add&#39;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    payload: newTask,</span></span>
<span class="line"><span style="color:#A6ACCD;">  };</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="redux-thunk-基本使用" tabindex="-1">redux-thunk - 基本使用 <a class="header-anchor" href="#redux-thunk-基本使用" aria-hidden="true">#</a></h2><blockquote><p><code>redux-thunk</code> 中间件可以处理<code>函数形式的 action</code>。因此，在函数形式的 action 中就可以执行异步操作代码，完成异步操作</p></blockquote><ol start="0"><li><p>安装：<code>yarn add redux-thunk</code></p></li><li><p>导入 <code>import thunk from &#39;redux-thunk&#39;</code></p></li><li><p>将 <code>thunk</code> 添加到中间件列表中</p></li><li><p>修改 action creator，<strong>返回一个异步函数</strong></p></li></ol><ul><li>说明： <ol><li>在函数形式的 action 中执行异步操作</li><li>在异步操作成功后，分发 action 更新状态</li></ol></li></ul><p><code>store/index.js</code></p><div class="language-diff line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;"> import thunk from &#39;redux-thunk&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">// 1. 将 thunk 添加到中间件列表中</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> const store = createStore(rootReducer, applyMiddleware( logger))</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;"> const store = createStore(rootReducer, applyMiddleware(thunk, logger))</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-diff line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">export  function addTodoCreator() {</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">	const newTodo = await loadNewTodoAPI();</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">   return {</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">     type: &#39;todo/add&#39;,</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">     payload: newTodo,</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#F07178;">   };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">	// 🔑 2.1 返回一个异步函数</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;"> 	return async (dispatch) =&gt; {</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">		const newTodo = await loadNewTodoAPI();</span></span>
<span class="line"><span style="color:#A6ACCD;">		// 2.2🔑 函数形参的获取到被拦截的dispatch，再次发起dispatch(action)</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">		dispatch({ type: &#39;todo/add&#39;, payload: newTodo });</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;"> 	};</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">// 其他示例代码不变</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="使用-redux-thunk-中间件前后对比" tabindex="-1">使用 redux-thunk 中间件前后对比 <a class="header-anchor" href="#使用-redux-thunk-中间件前后对比" aria-hidden="true">#</a></h2><ol><li>不使用 redux-thunk 中间件：</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1 dispatch 分发动作</span></span>
<span class="line"><span style="color:#82AAFF;">dispatch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">INCREMENT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">payload</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2 action 达到 reducer，调用 reducer</span></span>
<span class="line"><span style="color:#82AAFF;">reducer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">INCREMENT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">payload</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 得到新的状态值：12</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3 因为 Redux 中的状态更新了，所以，导致了组件重新渲染，组件中渲染出来的值：12</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>使用 redux-thunk 中间件：</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 函数形式的 action</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> incrementAsync </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 注意：此处返回的是函数，而不是一个对象</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">dispatch</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">getState</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 执行异步操作的代码了</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">dispatch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">INCREMENT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> payload</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 1 首先执行异步操作，比如，发请求获取个人资料</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 2 在异步操作完成后，继续调用 dispatch 分发状态</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 3 然后，redux 中就有了这个状态数据了</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 0 处理异步操作</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 目的：仅仅是给你一个地方，可以让你写 异步代码；也可以认为是这个函数形式的 action 帮你消化掉了 异步操作</span></span>
<span class="line"><span style="color:#82AAFF;">dispatch</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">incrementAsync</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1 dispatch 分发动作dispatch({ type: &#39;INCREMENT&#39;, payload: 2 })</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2 action 达到 reducer，调用 reducer// reducer(10, { type: &#39;INCREMENT&#39;, payload: 2 })// 得到新的状态值：12</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3 因为 Redux 中的状态更新了，所以，导致了组件重新渲染，组件中渲染出来的值：12</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="redux-thunk-中间件原理" tabindex="-1">redux-thunk - 中间件原理 <a class="header-anchor" href="#redux-thunk-中间件原理" aria-hidden="true">#</a></h2><ul><li><a href="https://github.com/reduxjs/redux-thunk/blob/master/src/index.ts" target="_blank" rel="noreferrer">redux-thunk 源码链接</a></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createThunkMiddleware</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">extraArgument</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Redux 中间件的写法：</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">myMiddleware</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">store</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* 此处写 中间件 的代码 */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">({</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">dispatch</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">getState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// redux-thunk 的核心代码：</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 判断 action 的类型是不是函数</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 如果是函数，就调用该函数（action），并且传入了 dispatch 和 getState</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">action</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">action</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">dispatch</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getState</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">extraArgument</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 如果不是函数，就调用下一个中间件（next），将 action 传递过去</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 如果没有其他中间件，那么，此处的 next 指的就是：Redux 自己的 dispatch 方法</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">action</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="redux-devtools-extension-的使用" tabindex="-1">redux-devtools-extension 的使用 <a class="header-anchor" href="#redux-devtools-extension-的使用" aria-hidden="true">#</a></h2><p><code>目标</code>：开发 react 项目时，通过 chrome 开发者工具调试跟踪 redux 状态</p><p><code>步骤</code>：</p><ol><li>通过包管理器在项目中安装 <code>yarn add redux-devtools-extension</code></li><li>在<code>store/index.js</code>中进行配置和导入</li><li>安装 chrome 浏览器插件 Redux_DevTools</li><li>启动 react 项目，打开 chrome 开发者工具，测试</li></ol><p><code>文档</code> <a href="https://www.npmjs.com/package/redux-devtools-extension" target="_blank" rel="noreferrer">redux-devtools-exension</a></p><div class="language-diff line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">diff</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">import { createStore, applyMiddleware } from &#39;redux&#39;;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">import { composeWithDevTools } from &#39;redux-devtools-extension&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">const store = createStore(  reducer,</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">  composeWithDevTools(</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">		applyMiddleware(...middleware)</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#C3E88D;">  )</span></span>
<span class="line"><span style="color:#A6ACCD;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h1 id="案例-极客园首页" tabindex="-1">案例-极客园首页 <a class="header-anchor" href="#案例-极客园首页" aria-hidden="true">#</a></h1><h2 id="安装依赖" tabindex="-1">安装依赖 <a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a></h2><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">axios</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redux</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redux-thunk</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">redux-devtools-extension</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">react-redux</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>需求列表：</p><p>01-极客园案例-首页-函数组件拆分</p><p>02-极客园案例-Redux 仓库设计</p><p>03-极客园案例-thunk 中间件和调试工具配置</p><p>04-极客园案例-频道获取异-异步 Action 处理</p><p>05-极客园案例-点击频道高亮</p><p>06-极客园案例-ActionType 封装</p><p>07-极客园案例-获取新闻列表</p>`,68),t=[c];function i(y,D,F,d,u,C){return a(),n("div",null,t)}const m=s(r,[["render",i]]);export{A as __pageData,m as default};
