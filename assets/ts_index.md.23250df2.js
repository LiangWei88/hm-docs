import{_ as s,c as e,o as a,b as l}from"./app.e637ca87.js";const p="/hm-docs/assets/image-20230202191639440.7e58a8d6.png",n="/hm-docs/assets/image-20220706182727310.79ebb864.png",t="/hm-docs/assets/image-20230202192047313.dc4b3767.png",i="/hm-docs/assets/image-20230203003258759.ecafda50.png",T=JSON.parse('{"title":"学习目标","description":"","frontmatter":{},"headers":[{"level":2,"title":"TypeScript 介绍","slug":"intro","link":"#intro","children":[{"level":3,"title":"TypeScript 是什么","slug":"typescript-是什么","link":"#typescript-是什么","children":[]}]},{"level":2,"title":"TypeScript 作用","slug":"effect","link":"#effect","children":[]},{"level":2,"title":"TypeScript 编译","slug":"compile","link":"#compile","children":[]}],"relativePath":"ts/index.md","lastUpdated":1675355712000}'),r={name:"ts/index.md"},o=l('<h1 id="学习目标" tabindex="-1">学习目标 <a class="header-anchor" href="#学习目标" aria-hidden="true">#</a></h1><ul><li>TypeScript 介绍 - 了解</li><li>TypeScript 初体验 - 了解</li><li>TypeScript 常用类型 - 掌握</li><li>TypeScript 高级类型 - 掌握</li><li>TypeScript 类型声明文件 - 掌握</li><li>在 Vue3 中使用 TypeScript - 掌握</li></ul><h1 id="typescript-起步" tabindex="-1">TypeScript 起步 <a class="header-anchor" href="#typescript-起步" aria-hidden="true">#</a></h1><h2 id="intro" tabindex="-1">TypeScript 介绍 <a class="header-anchor" href="#intro" aria-hidden="true">#</a></h2><blockquote><p>了解：TS是带类型语法的JS</p></blockquote><p>官方网站：<a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">https://www.typescriptlang.org/</a></p><p><s>中文官网：</s> <a href="https://www.tslang.cn/" target="_blank" rel="noreferrer">https://www.tslang.cn/</a></p><p><img src="'+p+'" alt="image-20230202191639440"></p><h3 id="typescript-是什么" tabindex="-1">TypeScript 是什么 <a class="header-anchor" href="#typescript-是什么" aria-hidden="true">#</a></h3><ul><li><p><strong><code>TypeScript</code> 简称：TS，是 JavaScript 的超集</strong>，简单来说就是：JS 有的 TS 都有</p><p><img src="'+n+'" alt="image-20220706182727310"></p></li><li><p><code>TypeScript</code> 是一种带有<strong>类型语法</strong>的 JavaScript 语言，简单来说就是：type + js = ts</p><p><img src="'+t+'" alt="image-20230202192047313"></p></li><li><p>TypeScript 是<strong>微软</strong>开发的开源编程语言。可以在任何运行 JavaScript 的地方运行</p></li></ul><p>注意：TS 需要编译才能在浏览器运行。</p><br><p>总结：</p><ul><li>TS 是 JS 的超集，支持JS 语法。</li><li>TS自带类型系统，微软开发。</li></ul><h2 id="effect" tabindex="-1">TypeScript 作用 <a class="header-anchor" href="#effect" aria-hidden="true">#</a></h2><blockquote><p>知道：TS作用是在编译时进行类型检查提示错误</p></blockquote><p>发现：</p><ul><li>JS 存在“先天缺陷”，JS 中绝大部分错误都是<strong>类型错误</strong>（Uncaught TypeError）</li><li>这些<a href="https://rollbar.com/blog/top-10-javascript-errors-from-1000-projects-and-how-to-avoid-them/" target="_blank" rel="noreferrer">错误</a>，导致挺多的时间去定位和处理 BUG</li></ul><p><img src="'+i+`" alt="image-20230203003258759"></p><br><p>原因：</p><ul><li>JS 是<strong>动态类型</strong>的编程语言，动态类型特点：只能在 <code>代码执行</code> 期间，做类型的相关检查，所以往往发现问题时，已经晚了。</li></ul><br><p>方案：</p><ul><li>TS 是<strong>静态类型</strong>的编程语言，代码会先进行编译然后去执行，在 <code>代码编译</code> 期间做类型的相关检查，如果有问题编译是不通过的，也就暴露出了问题。</li><li>配合 VSCode 等开发工具，TS 可以提前到在 <code>编写代码</code> 的时候就能发现问题，更准确更快的处理错误。</li></ul><br><p>TS 优势：</p><ul><li>更早发现错误，提高开发效率</li><li>随时随地提示，增强开发体验</li><li>强大类型系统，代码可维护性更好，重构代码更容易</li><li>趋势：Vue3源码TS重写，React和TS完美配合，Angular默认支持TS，大中型前端项目首选。</li></ul><br><p>总结：</p><ol><li><strong>TypeScript</strong> 属于<strong>静态类型</strong>的编程语，<strong>JavaScript</strong> 属于<strong>动态类型</strong>的编程语言。</li><li>开发效率高，开发体验好，前端流行趋势。</li></ol><h2 id="compile" tabindex="-1">TypeScript 编译 <a class="header-anchor" href="#compile" aria-hidden="true">#</a></h2><blockquote><p>知道：如何使用 tsc 编译 ts 代码</p></blockquote><p>全局安装：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># npm 安装</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">typescript</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># yarn 安装</span></span>
<span class="line"><span style="color:#FFCB6B;">yarn</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">typescript</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 部分mac电脑安装需要sudo权限</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># sudo npm i -g typescript</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># sudo yarn global add typescript</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>查看版本：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">tsc</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>编译 TS：</p><ol><li><p>新建 <code>hello.ts</code> 文件</p></li><li><p>当前目录打开命令行窗口，执行 <code>tsc hello.ts</code> 命令，自动生成 <code>hello.js</code> 文件</p></li><li><p>执行 <code>node hello.js</code> 验证一下</p></li></ol><p>思考：</p><ul><li>以后我们写 ts 都是手动的编译执行吗？ <ul><li>在开发中：一般使用 <code>webpack</code> <code>vite</code> 等工具自动构建编译。</li></ul></li></ul>`,41),c=[o];function d(h,y,u,g,b,m){return a(),e("div",null,c)}const _=s(r,[["render",d]]);export{T as __pageData,_ as default};
